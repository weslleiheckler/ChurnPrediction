GeoStates <- gvisGeoChart(brRegioes, "codUF", "mediaRegiao", locationvar = "BR-RS",
options=list(region="BR",
displayMode="regions",
resolution="provinces",
width=600,
height=400,
colorAxis="{colors:['green','blue','orange','red','grey']}"))
plot(GeoStates)
GeoStates <- gvisGeoChart(brRegioes, "codUF", "mediaRegiao", locationvar = "RS",
options=list(region="BR",
displayMode="regions",
resolution="provinces",
width=600,
height=400,
colorAxis="{colors:['green','blue','orange','red','grey']}"))
plot(GeoStates)
GeoStates <- gvisGeoChart(brRegioes, "codUF", "mediaRegiao", locationvar = "BR",
options=list(region="BR-RS",
displayMode="regions",
resolution="provinces",
width=600,
height=400,
colorAxis="{colors:['green','blue','orange','red','grey']}"))
plot(GeoStates)
##install.packages('googleVis')
library(googleVis, quietly = TRUE)
#GvisMap
descUF <- c("Acre","Amazonas","Rondônia","Roraima","Amapá","Pará","Tocantins", #Norte
"Maranhão","Piauí","Ceará","Rio Grande do Norte","Paraíba",
"Pernambuco","Alagoas","Sergipe","Bahia","Goiás","Distrito Federal",
"Mato Grosso","Mato Grosso do Sul",
"Minas Gerais","Espírito Santo","São Paulo","Rio de Janeiro",
"Paraná","Santa Catarina","Rio Grande do Sul")
codUF <- c("BR-AC","BR-AM","BR-RO","BR-RR","BR-AP","BR-PA","BR-TO", #Norte
"BR-MA","BR-PI","BR-CE","BR-RN","BR-PB", #Nordeste
"BR-PE","BR-AL","BR-SE","BR-BA", #Nordeste
"BR-MT","BR-MS","BR-GO","BR-DF", #Centro-Oeste
"BR-MG","BR-ES","BR-SP","BR-RJ", #Sudeste
"BR-PR","BR-SC","BR-RS") #Sul
regiao <- c("Norte","Norte","Norte","Norte","Norte","Norte","Norte",
"Nordeste","Nordeste","Nordeste","Nordeste","Nordeste", #Nordeste
"Nordeste","Nordeste","Nordeste","Nordeste", #Nordeste
"Centro-Oeste","Centro-Oeste","Centro-Oeste","Centro-Oeste", #Centro-Oeste
"Sudeste","Sudeste","Sudeste","Sudeste", #Sudeste
"Sul","Sul","Sul")
valores <- runif(27, 1.0, 6.0)
brStates <- data.frame(codUF = codUF, descUF = descUF, regiao = regiao, valor = valores)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR",
displayMode="regions",
resolution="provinces",
width=600,
height=400))
plot(GeoStates)
View(brStates)
#GvisMap
descUF <- c("Rio Grande do Sul")
codUF <- c("BR-RS") #Sul
regiao <- c("Sul")
valores <- runif(1, 1.0, 6.0)
brStates <- data.frame(codUF = codUF, descUF = descUF, regiao = regiao, valor = valores)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR",
displayMode="regions",
resolution="provinces",
width=600,
height=400))
plot(GeoStates)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR-RS",
displayMode="regions",
resolution="provinces",
width=600,
height=400))
plot(GeoStates)
GeoStates <- gvisGeoChart(brStates, "Novo Hamburgo", "valor",
options=list(region="BR",
displayMode="regions",
resolution="provinces",
width=600,
height=400))
plot(GeoStates)
View(brStates)
codUF <- c("Rio Grande do Sul") #Sul
regiao <- c("Sul")
valores <- runif(1, 1.0, 6.0)
brStates <- data.frame(codUF = codUF, descUF = descUF, regiao = regiao, valor = valores)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR",
displayMode="regions",
resolution="provinces",
width=600,
height=400))
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR",
displayMode="regions",
resolution="provinces",
width=600,
height=400))
plot(GeoStates)
codUF <- c("Novo Hamburgo") #Sul
regiao <- c("Sul")
valores <- runif(1, 1.0, 6.0)
brStates <- data.frame(codUF = codUF, descUF = descUF, regiao = regiao, valor = valores)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR",
displayMode="regions",
resolution="provinces",
width=600,
height=400))
plot(GeoStates)
codUF <- c("Novo Hamburgo,State of Rio Grande do Sul,Brazil") #Sul
regiao <- c("Sul")
valores <- runif(1, 1.0, 6.0)
brStates <- data.frame(codUF = codUF, descUF = descUF, regiao = regiao, valor = valores)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR",
displayMode="regions",
resolution="provinces",
width=600,
height=400))
plot(GeoStates)
codUF <- c("-300277:-512287", "-2967833:-5113056") #Sul
regiao <- c("Porto Alegre", "Novo Hamburgo")
valores <- runif(1, 1.0, 6.0)
brStates <- data.frame(codUF = codUF, descUF = descUF, regiao = regiao, valor = valores)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR",
displayMode="regions",
resolution="provinces",
width=600,
height=400))
plot(GeoStates)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR",
displayMode="markers",
resolution="provinces",
width=600,
height=400))
plot(GeoStates)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR-RS",
displayMode="markers",
resolution="provinces",
width=600,
height=400))
plot(GeoStates)
codUF <- c("-30027700:-51228700", "-296783300:-511305600") #Sul
regiao <- c("Porto Alegre", "Novo Hamburgo")
valores <- runif(1, 1.0, 6.0)
brStates <- data.frame(codUF = codUF, descUF = descUF, regiao = regiao, valor = valores)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR-RS",
displayMode="markers",
resolution="provinces",
width=600,
height=400))
plot(GeoStates)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR",
displayMode="markers",
resolution="provinces",
width=600,
height=400))
plot(GeoStates)
data(quakes)
head(quakes)
quakes$latlong<-paste(quakes$lat, quakes$long, sep=":")
View(quakes)
View(quakes)
codUF <- c("-30.0277:-51.2287", "-29.67833:-51.13056") #Sul
regiao <- c("Porto Alegre", "Novo Hamburgo")
valores <- runif(1, 1.0, 6.0)
brStates <- data.frame(codUF = codUF, descUF = descUF, regiao = regiao, valor = valores)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR",
displayMode="regions",
resolution="provinces",
width=600,
height=400))
plot(GeoStates)
#GvisMap
descUF <- c("Rio Grande do Sul")
codUF <- c("-30.0277:-51.2287", "-29.67833:-51.13056") #Sul
regiao <- c("Porto Alegre", "Novo Hamburgo")
valores <- runif(1, 1.0, 6.0)
brStates <- data.frame(codUF = codUF, descUF = descUF, regiao = regiao, valor = valores)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR",
displayMode="markers",
resolution="provinces",
width=600,
height=400))
plot(GeoStates)
##install.packages('googleVis')
library(googleVis, quietly = TRUE)
#GvisMap
descUF <- c("Acre","Amazonas","Rondônia","Roraima","Amapá","Pará","Tocantins", #Norte
"Maranhão","Piauí","Ceará","Rio Grande do Norte","Paraíba",
"Pernambuco","Alagoas","Sergipe","Bahia","Goiás","Distrito Federal",
"Mato Grosso","Mato Grosso do Sul",
"Minas Gerais","Espírito Santo","São Paulo","Rio de Janeiro",
"Paraná","Santa Catarina","Rio Grande do Sul")
codUF <- c("BR-AC","BR-AM","BR-RO","BR-RR","BR-AP","BR-PA","BR-TO", #Norte
"BR-MA","BR-PI","BR-CE","BR-RN","BR-PB", #Nordeste
"BR-PE","BR-AL","BR-SE","BR-BA", #Nordeste
"BR-MT","BR-MS","BR-GO","BR-DF", #Centro-Oeste
"BR-MG","BR-ES","BR-SP","BR-RJ", #Sudeste
"BR-PR","BR-SC","BR-RS") #Sul
regiao <- c("Norte","Norte","Norte","Norte","Norte","Norte","Norte",
"Nordeste","Nordeste","Nordeste","Nordeste","Nordeste", #Nordeste
"Nordeste","Nordeste","Nordeste","Nordeste", #Nordeste
"Centro-Oeste","Centro-Oeste","Centro-Oeste","Centro-Oeste", #Centro-Oeste
"Sudeste","Sudeste","Sudeste","Sudeste", #Sudeste
"Sul","Sul","Sul")
valores <- runif(27, 1.0, 6.0)
brStates <- data.frame(codUF = codUF, descUF = descUF, regiao = regiao, valor = valores)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR",
displayMode="regions",
resolution="states",
width=600,
height=400))
plot(GeoStates)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="076",
displayMode="regions",
resolution="provinces",
width=600,
height=400))
plot(GeoStates)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR-RS",
displayMode="regions",
resolution="provinces",
width=600,
height=400))
plot(GeoStates)
#GvisMap
descUF <- c("Rio Grande do Sul")
codUF <- c("-30.0277:-51.2287", "-29.67833:-51.13056") #Sul
regiao <- c("Porto Alegre", "Novo Hamburgo")
valores <- runif(1, 1.0, 6.0)
brStates <- data.frame(codUF = codUF, descUF = descUF, regiao = regiao, valor = valores)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR",
displayMode="markers",
#resolution="provinces",
width=600,
height=400))
plot(GeoStates)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR-RS",
displayMode="markers",
#resolution="provinces",
width=600,
height=400))
plot(GeoStates)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="RS",
displayMode="markers",
#resolution="provinces",
width=600,
height=400))
plot(GeoStates)
GeoStates <- gvisGeoChart(brStates, "BR-RS", "valor",
options=list(region="BR-RS",
displayMode="markers",
#resolution="provinces",
width=600,
height=400))
GeoStates <- gvisGeoChart(brStates, "BR-RS", "valor",
options=list(region="BR-RS",
displayMode="markers",
#resolution="provinces",
width=600,
height=400))
View(brStates)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR-RS",
displayMode="markers",
resolution="province",
width=600,
height=400))
plot(GeoStates)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR-RS",
displayMode="markers",
resolution="cities",
width=600,
height=400))
plot(GeoStates)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR-RS",
displayMode="markers",
resolution="cities",
width=900,
height=600))
plot(GeoStates)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR-RS",
displayMode="markers",
resolution="countries",
width=900,
height=600))
plot(GeoStates)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR-RS",
displayMode="markers",
resolution="country",
width=900,
height=600))
plot(GeoStates)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR-RS",
displayMode="markers",
resolution="metros",
width=900,
height=600))
plot(GeoStates)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR",
displayMode="markers",
resolution="metros",
width=900,
height=600))
plot(GeoStates)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR",
displayMode="markers",
resolution="provinces",
width=900,
height=600))
plot(GeoStates)
#GvisMap
descUF <- c("Rio Grande do Sul")
codUF <- c("-30.0277:-51.2287", "-29.67833:-51.13056") #Sul
regiao <- c("Porto Alegre", "Novo Hamburgo")
valores <- runif(2, 1.0, 6.0)
brStates <- data.frame(codUF = codUF, descUF = descUF, regiao = regiao, valor = valores)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR",
displayMode="markers",
resolution="provinces",
width=900,
height=600))
plot(GeoStates)
View(brStates)
##install.packages('googleVis')
library(googleVis, quietly = TRUE)
#GvisMap
descUF <- c("Acre","Amazonas","Rondônia","Roraima","Amapá","Pará","Tocantins", #Norte
"Maranhão","Piauí","Ceará","Rio Grande do Norte","Paraíba",
"Pernambuco","Alagoas","Sergipe","Bahia","Goiás","Distrito Federal",
"Mato Grosso","Mato Grosso do Sul",
"Minas Gerais","Espírito Santo","São Paulo","Rio de Janeiro",
"Paraná","Santa Catarina","Rio Grande do Sul")
codUF <- c("BR-AC","BR-AM","BR-RO","BR-RR","BR-AP","BR-PA","BR-TO", #Norte
"BR-MA","BR-PI","BR-CE","BR-RN","BR-PB", #Nordeste
"BR-PE","BR-AL","BR-SE","BR-BA", #Nordeste
"BR-MT","BR-MS","BR-GO","BR-DF", #Centro-Oeste
"BR-MG","BR-ES","BR-SP","BR-RJ", #Sudeste
"BR-PR","BR-SC","BR-RS") #Sul
regiao <- c("Norte","Norte","Norte","Norte","Norte","Norte","Norte",
"Nordeste","Nordeste","Nordeste","Nordeste","Nordeste", #Nordeste
"Nordeste","Nordeste","Nordeste","Nordeste", #Nordeste
"Centro-Oeste","Centro-Oeste","Centro-Oeste","Centro-Oeste", #Centro-Oeste
"Sudeste","Sudeste","Sudeste","Sudeste", #Sudeste
"Sul","Sul","Sul")
valores <- runif(27, 1.0, 6.0)
brStates <- data.frame(codUF = codUF, descUF = descUF, regiao = regiao, valor = valores)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR-RS",
displayMode="regions",
resolution="provinces",
width=600,
height=400))
plot(GeoStates)
##install.packages('googleVis')
library(googleVis, quietly = TRUE)
#GvisMap
descUF <- c("Acre","Amazonas","Rondônia","Roraima","Amapá","Pará","Tocantins", #Norte
"Maranhão","Piauí","Ceará","Rio Grande do Norte","Paraíba",
"Pernambuco","Alagoas","Sergipe","Bahia","Goiás","Distrito Federal",
"Mato Grosso","Mato Grosso do Sul",
"Minas Gerais","Espírito Santo","São Paulo","Rio de Janeiro",
"Paraná","Santa Catarina","Rio Grande do Sul")
codUF <- c("BR-AC","BR-AM","BR-RO","BR-RR","BR-AP","BR-PA","BR-TO", #Norte
"BR-MA","BR-PI","BR-CE","BR-RN","BR-PB", #Nordeste
"BR-PE","BR-AL","BR-SE","BR-BA", #Nordeste
"BR-MT","BR-MS","BR-GO","BR-DF", #Centro-Oeste
"BR-MG","BR-ES","BR-SP","BR-RJ", #Sudeste
"BR-PR","BR-SC","BR-RS") #Sul
regiao <- c("Norte","Norte","Norte","Norte","Norte","Norte","Norte",
"Nordeste","Nordeste","Nordeste","Nordeste","Nordeste", #Nordeste
"Nordeste","Nordeste","Nordeste","Nordeste", #Nordeste
"Centro-Oeste","Centro-Oeste","Centro-Oeste","Centro-Oeste", #Centro-Oeste
"Sudeste","Sudeste","Sudeste","Sudeste", #Sudeste
"Sul","Sul","Sul")
valores <- runif(27, 1.0, 6.0)
brStates <- data.frame(codUF = codUF, descUF = descUF, regiao = regiao, valor = valores)
GeoStates <- gvisGeoChart(brStates, "codUF", "valor",
options=list(region="BR",
displayMode="regions",
resolution="provinces",
width=600,
height=400))
plot(GeoStates)
# importar pacotes
library(tibble)
library(readr)
library(magrittr)
library(dplyr)
library(caret)
library(plotly)
library(rpart)
library(rattle)
# ler os dados
setwd('C:/Users/Wesllei/Downloads/Work/Data Science na Prática com R/')
getwd()
# ler os dados
setwd('C:/Users/Wesllei/Downloads/Work/Data Science/')
dados <- readr::read_csv('Churn_Modelling.csv', col_names = TRUE, col_types = NULL, locale = locale(encoding = "ISO-8859-2"))
# análise sobre os dados
summary(dados)
head(dados) # 6 primeiros registros
tail(dados) # 6 últimos registros
# análise sobre os dados
summary(dados)
# análise sobre os dados
View(dados)
View(dados)
head(dados) # 6 primeiros registros
tail(dados) # 6 últimos registros
summary(dados)
dados
summary(dados)
# pré-processamento
dados <- dados %>% mutate(Gender = as.factor(Gender),
Exited = ifelse(Exited == 1, 'SIM', 'NAO'),
Exited = as.factor(Exited))
summary(dados)
# quantidade de clientes retidos e perdidos
exited = dados %>% count(Exited)
plot_ly(exited, labels = c('Retidos','Perdidos'), values = ~n, type = "pie", textposition = "inside", textinfo = "percent", sort = FALSE)
# quantidade de clientes retidos e perdidos por país
geography = dados %>% count(Exited,Geography)
plot_ly(geography, x = ~Geography, y = ~n, type = "bar", color = ~Exited) %>%
layout(legend = list(title = list(text = 'Cliente Perdido')),
xaxis = list(title = "País"),
yaxis = list(title = "Número de Clientes"))
# cliente perdido por score de crédito
fig <- plot_ly(dados, x = ~Age, y = ~ CreditScore, color = ~Exited, type = "scatter", mode = "markers") %>%
layout(legend = list(title = list(text = 'Cliente Perdido')),
xaxis = list(title = "Idade"),
yaxis = list(title = "Score"))
fig <- fig %>% layout(title = 'Distribuição de Cliente por Idade, Score e Cancelamento')
fig
# cliente perdido por idade
plot_ly(dados, y = ~Age, color = ~Exited, type = "box") %>%
layout(showlegend = FALSE,
xaxis = list(title = "Cliente Perdido"),
yaxis = list(title = "Idade"))
# dividir os dados de forma balanceada
set.seed(123) # gerar sempre os mesmos índices
indices <- createDataPartition(dados$Exited, p = .7, list = FALSE, times = 1)
treinamento <- dados[indices,]
teste <- dados[-indices,]
dadosTreinamento = treinamento %>% count(Exited)
plot_ly(dadosTreinamento, labels = c('Retidos','Perdidos'), values = ~n, type = "pie", textposition = "inside",
text = ~n, textinfo = "percent+text", sort = FALSE)
dadosTeste = teste %>% count(Exited)
# quantidade de clientes retidos e perdidos por país
geography = dados %>% count(Exited,Geography)
plot_ly(geography, x = ~Geography, y = ~n, type = "bar", color = ~Exited) %>%
layout(legend = list(title = list(text = 'Cliente Perdido')),
xaxis = list(title = "País"),
yaxis = list(title = "Número de Clientes"))
# dividir os dados de forma balanceada
set.seed(123) # gerar sempre os mesmos índices
indices <- createDataPartition(dados$Exited, p = .7, list = FALSE, times = 1)
treinamento <- dados[indices,]
teste <- dados[-indices,]
# minsplit (quantidade mínima de exemplares em um nó para que ele tenha subárvores)
# split (ganho de informação: entropia e Gini)
modeloDT <- rpart(Exited ~ CreditScore + Gender + Age + Balance, data = treinamento,
method = "class", control = rpart.control(minsplit = 20), parms = list(split = 'Information'))
# deduzir o modelo
classeEstimada <- predict(modeloDT, teste, "class")
matrizConfusao <- confusionMatrix(classeEstimada, teste$Exited, positive = 'SIM')
matrizConfusao
# inserindo mais dados
modeloDT <- rpart(Exited ~ CreditScore + Gender + Age + Balance + NumOfProducts + HasCrCard + EstimatedSalary, data = treinamento,
method = "class", control = rpart.control(minsplit = 20), parms = list(split = 'Information'))
classeEstimada <- predict(modeloDT, teste, "class")
matrizConfusao <- confusionMatrix(classeEstimada, teste$Exited, positive = 'SIM')
matrizConfusao
View(dados)
# é só inserir mais dados?
modeloDT <- rpart(Exited ~ CreditScore + Gender + Age + Balance + NumOfProducts + HasCrCard + EstimatedSalary + CustomerId,
data = treinamento, method = "class", control = rpart.control(minsplit = 20), parms = list(split = 'Information'))
classeEstimada <- predict(modeloDT, teste, "class")
matrizConfusao <- confusionMatrix(classeEstimada, teste$Exited, positive = 'SIM')
matrizConfusao
# inserindo atributos relevantes
modeloDT <- rpart(Exited ~ CreditScore + Gender + Age + Tenure + Balance + NumOfProducts + HasCrCard + EstimatedSalary + IsActiveMember + Geography,
data = treinamento, method = "class", control = rpart.control(minsplit = 20), parms = list(split = 'Information'))
classeEstimada <- predict(modeloDT, teste, "class")
matrizConfusao <- confusionMatrix(classeEstimada, teste$Exited, positive = 'SIM')
matrizConfusao
# árvore de decisão gerada
fancyRpartPlot(modeloDT, sub = "")
